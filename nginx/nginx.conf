# Nginx Load Balancer Configuration
# 
# This configuration sets up Nginx as a reverse proxy and load balancer
# for the Performance & Scalability Demo application.
# 
# Features:
# - Load balancing: Distributes traffic across multiple app instances
# - Health monitoring: Checks /health endpoint to determine instance health
# - Rate limiting: Protects against abuse at the infrastructure level
# - Retry logic: Automatically retries failed requests on other instances
# - Connection pooling: Reuses connections for better performance
# 
# Load balancing strategies supported:
# - Round-robin (default): Even distribution across all healthy instances
# - Least connections: Routes to instance with fewest active connections
# - IP hash: Routes based on client IP for session persistence
# 
# Benefits:
# - High availability: If one instance fails, others continue serving
# - Scalability: Easy to add/remove instances without downtime
# - Performance: Distributes load and reduces response times
# - Fault tolerance: Automatic failover and health monitoring

events {
    worker_connections 1024;
}

http {
    # Load balancing configuration
    # Defines the upstream servers (application instances) that will handle requests
    upstream app_servers {
        # Round-robin by default - requests are distributed evenly
        server app1:3000 max_fails=3 fail_timeout=30s;  # Instance 1
        server app2:3000 max_fails=3 fail_timeout=30s;  # Instance 2
        server app3:3000 max_fails=3 fail_timeout=30s;  # Instance 3
        
        # max_fails: Mark server as unavailable after 3 consecutive failures
        # fail_timeout: Time to wait before trying the server again (30 seconds)
        
        # Connection pooling for better performance
        keepalive 32;  # Keep 32 connections open for reuse
    }
    
    # Rate limiting configuration
    # Protects against abuse at the infrastructure level (before reaching app servers)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    # $binary_remote_addr: Use client IP as key (binary format for memory efficiency)
    # zone=api:10m: 10MB memory zone can store ~160k IP addresses
    # rate=10r/s: Allow 10 requests per second per IP
    
    server {
        listen 80;  # Listen on port 80 (HTTP)
        
        # Health check endpoint for load balancer monitoring
        # This endpoint is used by external monitoring systems
        location /health {
            access_log off;  # Don't log health check requests (reduces noise)
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            
            # Fast timeout for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Main application routes
        # All requests except /health are handled here
        location / {
            # Apply rate limiting with burst capacity
            limit_req zone=api burst=20 nodelay;
            # burst=20: Allow up to 20 requests above the rate limit temporarily
            # nodelay: Don't delay excess requests, either allow or reject immediately
            
            # Proxy to application servers with load balancing
            proxy_pass http://app_servers;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Request-ID $request_id;  # For tracing requests
            
            # Timeout settings for application requests
            proxy_connect_timeout 5s;   # Time to establish connection
            proxy_send_timeout 10s;     # Time to send request to upstream
            proxy_read_timeout 10s;     # Time to read response from upstream
            
            # Retry configuration for fault tolerance
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            # Retry on: connection errors, timeouts, invalid responses, server errors
            proxy_next_upstream_tries 3;      # Maximum 3 retry attempts
            proxy_next_upstream_timeout 10s;  # Total time for all retries
        }
    }
}
